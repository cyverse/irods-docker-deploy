#! /bin/bash
#
# Usage:
#  controller (create_volumes|start|stop)
#
# Starts or stops all of the containers.
cfg=config-resource.inc

set -e


if [[ "$OSTYPE" == "darwin"* ]]
then
  readonly ExecName=$(greadlink -f "$0")
else
  readonly ExecName=$(readlink --canonicalize "$0")
fi

main()
{
  local baseDir=$(dirname "$ExecName")

  if [ "$#" -lt 1 ]
  then
    printf 'Requires "create_volumes", "start" or "stop" as its second parameter.\n' >&2
    return 1
  fi

  local action="$1"

  . "$baseDir/$cfg"

  case "$action" in
    create_volumes)
      mkdir -p "$LOCAL_IRODS_RESOURCE_VOLUME_PATH"
      docker volume create --driver local \
        --opt type=none \
        --opt device="$LOCAL_IRODS_RESOURCE_VOLUME_PATH" \
        --opt o=bind "$DOCKER_IRODS_RESOURCE_VOLUME"
      ;;
    start)
      if ! command -v docker-compose > /dev/null; then
        docker compose --file "$baseDir"/docker-compose-resource.yml --project-name "$ENV_NAME" up -d
      else
        docker-compose --file "$baseDir"/docker-compose-resource.yml --project-name "$ENV_NAME" up -d
      fi
      ;;
    stop)
      if ! command -v docker-compose > /dev/null; then
        docker compose --file "$baseDir"/docker-compose-resource.yml --project-name "$ENV_NAME" down --remove-orphans
      else
        docker-compose --file "$baseDir"/docker-compose-resource.yml --project-name "$ENV_NAME" down --remove-orphans
      fi
      ;;
    *)
      printf 'Unknown command "%s"\n' "$action" >&2
      return 1
      ;;
  esac
}


main "$@"
